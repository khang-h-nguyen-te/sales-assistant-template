const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const path = require('path');
require('dotenv').config();

const app = express();

// Helper function to add timeout to fetch
const fetchWithTimeout = async (url, options, timeout = 9000) => {
  const controller = new AbortController();
  const { signal } = controller;
  
  const timeoutId = setTimeout(() => controller.abort(), timeout);
  
  try {
    const response = await fetch(url, { ...options, signal });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

// Middleware
app.use(cors());
app.use(express.json());

// Dynamically generate config.js with environment variables
app.get('/config.js', (req, res) => {
  const config = `
    // This file is dynamically generated by the server
    window.ENV_CONFIG = {
      API_ENDPOINT: '/api/ask'
    };
  `;
  res.setHeader('Content-Type', 'application/javascript');
  res.send(config);
});

// Static files middleware - serve from both root and public directory
if (process.env.NODE_ENV !== 'production') {
  // In development, serve files from both locations
  app.use(express.static(path.join(__dirname)));
  app.use(express.static(path.join(__dirname, 'public')));
} else {
  // In production, prioritize files in public directory
  app.use(express.static(path.join(__dirname, 'public')));
  app.use(express.static(path.join(__dirname)));
}

// API Proxy endpoint
app.post('/api/ask', async (req, res) => {
  const { query } = req.body;
  console.log('Processing request:', query);

  // If this is a cold start or first request, send a quick response
  if (query === '__ping') {
    return res.json({ 
      response: "I'm awake now! What can I help you with?",
      coldStart: true
    });
  }

  // Process the actual request with retries
  try {
    const apiUrl = process.env.API_ENDPOINT || 'https://pho24-chatbot.vercel.app/ask';
    console.log('Sending request to:', apiUrl);
    
    // Try up to 2 times (initial + 1 retry)
    let lastError = null;
    let attempts = 0;
    const maxAttempts = 2;
    
    while (attempts < maxAttempts) {
      attempts++;
      console.log(`Attempt ${attempts}/${maxAttempts}`);
      
      try {
        // Use a shorter timeout for better user experience
        const response = await fetchWithTimeout(
          apiUrl, 
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ query }),
            redirect: 'follow',
          },
          8000 // 8-second timeout to stay under Vercel's limits
        );
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error(`API error response (${response.status}):`, errorText.substring(0, 100));
          throw new Error(`API responded with status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('API response success');
        return res.json(data);
      } catch (error) {
        console.error(`Attempt ${attempts} failed:`, error.message);
        lastError = error;
        
        // If it's not a timeout error, don't retry
        if (error.name !== 'AbortError' && !error.message.includes('timeout')) {
          break;
        }
      }
    }
    
    throw lastError || new Error('All attempts failed');
  } catch (error) {
    console.error('Error processing request:', error.message);
    return res.status(500).json({ 
      error: 'Processing request failed',
      response: "I'm having trouble connecting to my knowledge base right now. Please try again in a moment."
    });
  }
});

// For local development, serve the main HTML file
if (process.env.NODE_ENV !== 'production') {
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
  });

  const PORT = process.env.PORT || 8080;
  app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
  });
}

// Export for Vercel
module.exports = app; 